# This file was generated based on "my.schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Bullet {
    author: User!
    content: String!
    create_at: Date!
    id: ID!
    medium: Medium!
    point: Float
}

type Category {
    alias: String
    children: [Category!]
    create_at: Date!
    delete_at: Date
    description: String
    id: ID!
    label: String!
    mark: String!
    parent: Category
    update_at: Date!
}

type Character {
    avatar: String
    description: String
    name: String!
    tags: [String!]
}

type Follow {
    create_at: Date!
    delete_at: Date
    follower: User!
    owner: User!
    update_at: Date!
}

type FollowEdge {
    cursor: String!
    node: Follow!
}

type FollowPageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type FollowPaginated {
    edges: [FollowEdge!]
    nodes: [Follow!]
    pageInfo: FollowPageInfo!
    totalCount: Int!
}

type Medium {
    alias_name: String
    cover: String
    create_at: Date!
    delete_at: Date
    description: String
    duration: Float
    high_quality_url: String
    id: ID!
    low_quality_url: String
    medium_quality_url: String
    name: String
    posters: [String!]
    preview_url: String
    sub_name: String
    super_quality_url: String
    update_at: Date!
    url: String!
    version: Float
    vote_dislike_count: Float
    vote_like_count: Float
    votes: [Vote!]
    youtube_url: String
}

type Mutation {
    add_category_to_tag(category_id: Float!, tag_id: Float!): Boolean!
    add_mediums_to_shadow(shadow_id: ID!, shadow_medium: CreateShadowMediumInput!): Shadow!
    add_shadow_to_playlist(playlist_id: Float!, shadow_id: Float!): Boolean!
    add_tags_to_shadow(shadow_id: ID!, tag_ids: [ID!]!): Shadow!
    create_bullet(bullet: CreateBulletInput!): Bullet!
    create_category(category: CreateCategoryInput!): Category!
    create_follow(follow: CreateFollowInput!): Follow!
    create_or_update_vote(vote: CreateVoteInput!): Vote!
    create_playlist(playlist: CreatePlaylistInput!): Playlist!
    create_review(review: CreateReviewInput!): Review!
    create_shadow(shadow: CreateShadowInput!): Shadow!
    create_tag(tag: CreateTagInput!): Tag!
    create_topic(topic: CreateTopicInput!): Topic!
    "create user."
    create_user(user: CreateUserInput!): User!
    "create user with verif code."
    create_user_with_code(user: CreateUserWithCodeInput!): User!
    delete_category(id: ID!): Boolean!
    login(password: String!, username: String!): String!
    remove_follow(follow: DeleteFollowInput!): Follow!
    send_register_email(email: String!): Boolean!
    update_shadow(shadow: UpdateShadowInput!, shadow_id: ID!): Shadow!
    update_user(user: UpdateUserInput!): User!
    upload_file_oss(file: Upload!): String!
}

type PlatformAuthWay {
    platform: String!
    url: String!
}

type Playlist {
    author: User!
    cover: String
    create_at: Date!
    delete_at: Date
    description: String
    id: ID!
    shadows: [Shadow!]
    shadows_count: Float
    title: String!
    update_at: Date!
}

type PlaylistEdge {
    cursor: String!
    node: Playlist!
}

type PlaylistPageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type PlaylistPaginated {
    edges: [PlaylistEdge!]
    nodes: [Playlist!]
    pageInfo: PlaylistPageInfo!
    totalCount: Int!
}

type Query {
    category(id: Float!): Category!
    current_topic: Topic!
    fans: [Follow!]!
    fans_paginated(query: PaginatedQuery): FollowPaginated!
    fans_total(owner_uid: String): Int!
    follows: [Follow!]!
    follows_paginated(query: PaginatedQuery): FollowPaginated!
    follows_total(follower_uid: String): Int!
    "find username exit."
    has_username(username: String!): Boolean!
    is_following(follower_uid: String, owner_uid: String!): Boolean!
    me: User!
    medium_vote_count(medium_id: Float!, status: String!): Int!
    platform_auth_way: [PlatformAuthWay!]!
    playlist(playlist_id: Float!): Playlist!
    playlists_paginated(author_uid: String, author_username: String, query: PaginatedQuery): PlaylistPaginated!
    reviews_paginated(query: PaginatedQuery, type: ReviewMedium, type_id: ID): ReviewPaginated!
    search_shadows_paginated(query: PaginatedQuery, word: String): ShadowPaginated!
    shadow(id: ID!): Shadow!
    shadow_next_urges_by_shadow(shadow_id: ID!): [Shadow!]!
    shadow_urges: [Shadow!]!
    shadow_urges_by_shadow(shadow_id: ID!): [Shadow!]!
    shadows_paginated(query: PaginatedQuery): ShadowPaginated!
    "find user by uid or username."
    user(uid: String, username: String): User!
    user_shadows_paginated(author_username: String!, query: PaginatedQuery): ShadowPaginated!
    user_urges: [User!]!
    "all user with paginated."
    users_paginated(query: PaginatedQuery): UserPaginated!
    vote(medium_id: ID!): Vote!
}

type Review {
    author: User!
    content: String!
    create_at: Date!
    delete_at: Date
    id: ID!
    update_at: Date!
}

type ReviewEdge {
    cursor: String!
    node: Review!
}

type ReviewPageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type ReviewPaginated {
    edges: [ReviewEdge!]
    nodes: [Review!]
    pageInfo: ReviewPageInfo!
    totalCount: Int!
}

type Shadow {
    about: String
    alias_title: String
    author: User!
    clazz: Category
    cover: String!
    create_at: Date!
    credits: [Character!]
    delete_at: Date
    description: String
    id: ID!
    posters: [String!]
    region: Region!
    sources: [ShadowMedium!]
    sub_title: String
    tags: [Tag!]
    title: String!
    update_at: Date!
}

type ShadowEdge {
    cursor: String!
    node: Shadow!
}

type ShadowMedium {
    alias_name: String
    cover: String
    create_at: Date!
    delete_at: Date
    description: String
    duration: Float
    high_quality_url: String
    id: ID!
    low_quality_url: String
    medium_quality_url: String
    name: String
    posters: [String!]
    preview_url: String
    sub_name: String
    super_quality_url: String
    update_at: Date!
    url: String!
    version: Float
    vote_dislike_count: Float
    vote_like_count: Float
    votes: [Vote!]
    youtube_url: String
}

type ShadowPageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type ShadowPaginated {
    edges: [ShadowEdge!]
    nodes: [Shadow!]
    pageInfo: ShadowPageInfo!
    totalCount: Int!
}

type Subscription {
    review_created(type: ReviewMedium!, type_id: ID!): Review!
    user_created: User!
}

type Tag {
    alias: String
    categories: [Category!]
    create_at: Date!
    description: String
    id: ID!
    label: String!
    update_at: Date!
}

type Topic {
    create_at: Date!
    delete_at: Date
    description: String
    id: ID!
    title: String!
    top_shadow: Shadow
    top_shadows: [Shadow!]
    update_at: Date!
}

type User {
    address: String
    avatar: String
    create_at: Date
    delete_at: Date
    description: String
    email: String
    mobile: String
    nickname: String
    uid: ID!
    update_at: Date
    username: String!
}

type UserEdge {
    cursor: String!
    node: User!
}

type UserPageInfo {
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
}

type UserPaginated {
    edges: [UserEdge!]
    nodes: [User!]
    pageInfo: UserPageInfo!
    totalCount: Int!
}

type Vote {
    create_at: Date!
    delete_at: Date
    id: ID!
    medium: Medium!
    owner: User!
    status: VoteStatus!
    update_at: Date!
}

enum Region {
    America
    Britain
    Hongkong
    India
    Mainland
    Taiwan
}

enum ReviewMedium {
    MEDIUM
    SHADOW
}

enum VoteStatus {
    DEFAULT
    DISLIKE
    LIKD
}

input CreateBulletInput {
    content: String!
    medium_id: Int!
    point: Float
}

input CreateCategoryInput {
    alias: String
    children: [CreateCategoryInput!]
    description: String
    label: String!
    mark: String!
    parent_id: Float
}

input CreateCharacterInput {
    avatar: String
    description: String
    name: String!
}

input CreateFollowInput {
    follower_uid: ID
    owner_uid: ID!
}

input CreatePlaylistInput {
    cover: String
    description: String
    title: String!
}

input CreateReviewInput {
    author_uid: ID
    content: String!
    type: ReviewMedium!
    type_id: ID!
}

input CreateShadowInput {
    about: String
    alias_title: String
    cover: String!
    credits: [CreateCharacterInput!]
    description: String
    posters: [String!]
    region: String
    sources: [CreateShadowMediumInput!]
    sub_title: String
    title: String!
}

input CreateShadowMediumInput {
    alias_name: String
    cover: String
    description: String
    name: String!
    posters: [String!]
    shadow_id: ID
    sub_name: String
    url: String!
    youtube_url: String
}

input CreateTagInput {
    alias: String
    description: String
    label: String!
}

input CreateTopicInput {
    description: String
    title: String!
    top_shadow_id: ID
    top_shadows_ids: [ID!]
}

input CreateUserInput {
    address: String
    avatar: String
    description: String
    email: String!
    mobile: String
    nickname: String
    password: String!
    username: String!
}

input CreateUserWithCodeInput {
    address: String
    avatar: String
    code: String!
    description: String
    email: String!
    mobile: String
    nickname: String
    password: String!
    username: String!
}

input CreateVoteInput {
    medium_id: Float!
    owner_uid: String
    status: VoteStatus!
}

input DeleteFollowInput {
    follower_uid: ID
    owner_uid: ID!
}

input PaginatedQuery {
    after: String
    before: String
    first: Int
    last: Int
}

input UpdateShadowInput {
    about: String
    alias_title: String
    cover: String
    credits: [CreateCharacterInput!]
    description: String
    posters: [String!]
    region: String
    sources: [CreateShadowMediumInput!]
    sub_title: String
    title: String
}

input UpdateUserInput {
    address: String
    avatar: String
    description: String
    mobile: String
    nickname: String
    password: String
}


"Date custom scalar type"
scalar Date

"The `Upload` scalar type represents a file upload."
scalar Upload